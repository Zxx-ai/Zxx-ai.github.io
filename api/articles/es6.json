{"title":"es6","slug":"es6","date":"2020-03-18T13:54:43.000Z","updated":"2020-03-18T13:54:43.000Z","comments":true,"path":"api/articles/es6.json","photos":[],"link":"","excerpt":"ES6语法：  [Figure] ","covers":["https://i.loli.net/2020/03/18/ibVqGxtAsCEUplv.png"],"content":"<h3 id=\"ES6语法：\"><a href=\"#ES6语法：\" class=\"headerlink\" title=\"ES6语法：\"></a>ES6语法：</h3><p> <img src=\"https://i.loli.net/2020/03/18/ibVqGxtAsCEUplv.png\" alt=\"ppp.PNG\"></p>\n<a id=\"more\"></a>\n\n\n<p><strong>let、   const、  var的区别</strong></p>\n<p>1.使用var声明的变量，其作用域为该语句所在的函数内，且存在变量提升现象。</p>\n<p>2.使用let声明的变量，其作用域为该语句所在的代码块内，不存在变量提升。</p>\n<p>3.使用const声明的是常量，在后面出现的代码中不能修改该常量的值。</p>\n<h3 id=\"this的指向问题\"><a href=\"#this的指向问题\" class=\"headerlink\" title=\"this的指向问题\"></a>this的指向问题</h3><p>this 指向问题是入坑前端必须了解知识点，现在迎来了ES6时代，因为箭头函数的出现，所以感觉有必要对 this 问题梳理一下，遂有此文</p>\n<p>在非箭头函数下， this 指向调用其所在函数的对象，而且是离谁近就是指向谁（此对于常规对象，原型链， getter &amp; setter等都适用）；构造函数下，this与被创建的新对象绑定；DOM事件，this指向触发事件的元素；内联事件分两种情况，bind绑定， call &amp; apply 方法等， 容以下一步一步讨论。箭头函数也会穿插其中进行讨论。</p>\n<h4 id=\"全局环境下\"><a href=\"#全局环境下\" class=\"headerlink\" title=\"全局环境下\"></a>全局环境下</h4><p>在全局环境下，this 始终指向全局对象（window）, 无论是否严格模式；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(this.document &#x3D;&#x3D;&#x3D; document); &#x2F;&#x2F; true</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 在浏览器中，全局对象为 window 对象：</span><br><span class=\"line\">console.log(this &#x3D;&#x3D;&#x3D; window); &#x2F;&#x2F; true</span><br><span class=\"line\"></span><br><span class=\"line\">this.a &#x3D; 37;</span><br><span class=\"line\">console.log(window.a); &#x2F;&#x2F; 37</span><br></pre></td></tr></table></figure>\n\n\n<hr>\n<p>箭头函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const sum &#x3D; (n1,n2) &#x3D;&gt; n1+n2</span><br><span class=\"line\">const a&#x3D;sum(10,10);</span><br><span class=\"line\">console.log(a)</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"ES6的内置对象扩展\"><a href=\"#ES6的内置对象扩展\" class=\"headerlink\" title=\"ES6的内置对象扩展\"></a>ES6的内置对象扩展</h4><p><strong>Array的扩展方法</strong></p>\n<p><strong>1.构造函数方法：Array.from()</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var array&#x3D;&#123;</span><br><span class=\"line\">\t&quot;0&quot;:1,</span><br><span class=\"line\">\t&quot;1&quot;:2,</span><br><span class=\"line\">\t&quot;length&quot;:2\t</span><br><span class=\"line\">&#125;\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">let list&#x3D;Array.from(array);</span><br><span class=\"line\">console.log(list);</span><br></pre></td></tr></table></figure>\n\n<p><strong>2.方法还接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组.</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var array&#x3D;&#123;</span><br><span class=\"line\">\t&quot;0&quot;:1,</span><br><span class=\"line\">\t&quot;1&quot;:2,</span><br><span class=\"line\">\t&quot;length&quot;:2\t</span><br><span class=\"line\">&#125;\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">let list&#x3D;Array.from(array, item &#x3D;&gt; item * 2);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>1-1.实例方法：find();</strong></p>\n<p>查询</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let ary &#x3D; [</span><br><span class=\"line\">\t&#123;id:1,name:&quot;李四&quot;&#125;,</span><br><span class=\"line\">\t&#123;id:2,name:&quot;张三&quot;&#125;</span><br><span class=\"line\">\t]</span><br><span class=\"line\"></span><br><span class=\"line\">let getlist &#x3D; ary.find((item,index) &#x3D;&gt; item.id &#x3D;&#x3D; 2)</span><br><span class=\"line\">\tconsole.log(getlist)</span><br><span class=\"line\">\t&#x2F;&#x2F;输出:object&#123;id:2,name:&quot;张三&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p><strong>1-2.实例方法：findIndex();</strong></p>\n<p>查找第一个符合条件的索引</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let ary &#x3D; [10,20,30,40,50]</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tlet getindex &#x3D; ary.findIndex( item &#x3D;&gt; item &gt; 30 );</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tconsole.log(getindex);</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>1-3.实例方法： includes();</strong></p>\n<p>表示某个数组是否包含给定的值，返回布尔值。</p>\n<p>​    </p>\n<pre><code>let ary = [1,2,3,4,5,6]\nconsole.log(ary.includes(3))//true\nconsole.log(ary.includes(7))//false</code></pre><p><strong>1-4.String的扩展方法</strong></p>\n<p>模板字符串 </p>\n<p>可以解析</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let name &#x3D; &#96;张三&#96;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">let string &#x3D; &#96;hello，我的名字叫$&#123;name&#125;&#96;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">console.log(string);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;输出结果:hello，我的名字叫张三</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let result &#x3D; &#123;</span><br><span class=\"line\">\tname: &#39;张三&#39;,</span><br><span class=\"line\">\tage:20,</span><br><span class=\"line\">\tsex: &#39;男&#39;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let html &#x3D; &#96;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">&lt;span&gt;$&#123;result.name&#125;&lt;&#x2F;span&gt;</span><br><span class=\"line\">&lt;span&gt;$&#123;result.age&#125;&lt;&#x2F;span&gt;</span><br><span class=\"line\">&lt;span&gt;$&#123;result.sex&#125;&lt;&#x2F;span&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(html)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;输出结果：</span><br><span class=\"line\">&#x2F;&#x2F;&lt;div&gt;</span><br><span class=\"line\">&#x2F;&#x2F;&lt;span&gt;张三&lt;&#x2F;span&gt;</span><br><span class=\"line\">&#x2F;&#x2F;&lt;span&gt;20&lt;&#x2F;span&gt;</span><br><span class=\"line\">&#x2F;&#x2F;&lt;span&gt;男&lt;&#x2F;span&gt;</span><br><span class=\"line\">&#x2F;&#x2F;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const fn &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">\treturn &#39;我是fn函数&#39;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let html &#x3D; &#96;我是模板字符串-----$&#123;fn()&#125;&#96;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(html)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;输出结果:我是模板字符串-----我是fn函数</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;强大哈哈哈</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p><strong>实例方法： startsWith() 和 endsWith()</strong></p>\n<p>startsWith():表示参数字符串是否在原字符串的头部，返回布尔值</p>\n<p>endsWith():表示参数字符串是否在原字符串的尾部，返回布尔值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">\tlet str &#x3D; &#39;hello world!&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">let a &#x3D;\tstr.startsWith(&#39;hello&#39;);</span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\tconsole.log(a);&#x2F;&#x2F;true</span><br><span class=\"line\"></span><br><span class=\"line\">let b &#x3D;\tstr.endsWith(&#39;!&#39;);</span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\tconsole.log(b);&#x2F;&#x2F;true</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;错误示范</span><br><span class=\"line\"></span><br><span class=\"line\">let a1 &#x3D;\tstr.startsWith(&#39;nihaao&#39;);</span><br><span class=\"line\">console.log(a1);&#x2F;&#x2F;false</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p><strong>实例方法： repeat()</strong></p>\n<p>repeat方法表示将原字符串重复n次，返回一个新字符串。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(&quot;张三&quot;.repeat(6))</span><br><span class=\"line\"></span><br><span class=\"line\">结果：张三张三张三张三张三张三</span><br></pre></td></tr></table></figure>\n\n\n\n\n<hr>\n<h4 id=\"Set-数据结构\"><a href=\"#Set-数据结构\" class=\"headerlink\" title=\"Set 数据结构\"></a>Set 数据结构</h4><p>ES6提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p>\n<p>Set本身是一个构造函数，用来生成Set数据结构。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const  s &#x3D; new Set();</span><br></pre></td></tr></table></figure>\n\n<p>Set函数可以接受一个数组作为参数，用来初始化。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const set &#x3D; new Set([1,2,3,4,5]);</span><br></pre></td></tr></table></figure>\n\n\n\n<p>代码测试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const s1 &#x3D; new Set();</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(s1.size)</span><br><span class=\"line\"></span><br><span class=\"line\">const s2 &#x3D; new Set([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]);</span><br><span class=\"line\">console.log(s2.size)&#x2F;&#x2F;结果：3</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">const s3 &#x3D; new Set([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;b&quot;,&quot;c&quot;]);</span><br><span class=\"line\">console.log(s3.size)&#x2F;&#x2F;结果：3   &#x2F;&#x2F;去重了</span><br><span class=\"line\">const ary &#x3D; [...s3];&#x2F;&#x2F;转数组</span><br><span class=\"line\">console.log(ary)&#x2F;&#x2F;结果:数组类型</span><br></pre></td></tr></table></figure>\n\n\n\n<p>数据结构的几个方法</p>\n<p>add(value):添加某个值，返回Set结构本身</p>\n<p>delete(value):删除某个值，返回一个布尔值，表示删除是否成功</p>\n<p>has(value):返回一个布尔值，表示该值是否为Set的成员</p>\n<p>clear():清除所有成员，没有返回值</p>\n<pre><code>const s = new Set();    \n\ns.add(1).add(2).add(3);\nconsole.log(s.size)//结果:3\n\n//删除某个值，返回一个布尔值，表示删除是否成功\nconst r1 = s.delete(2);\nconsole.log(s.size);\nconsole.log(r1);//true\n\n\n//返回一个布尔值，表示该值是否为Set的成员\nconst r2 = s.has(1);\nconsole.log(r2);//true\n\nconst r3 = s.has(2);\nconsole.log(r3);//false\n\n\n//清空set数据结构中的值 使用clear方法\ns.clear();</code></pre><p>​    </p>\n<p>遍历set</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const s&#x3D; new Set([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]);</span><br><span class=\"line\">\t      s.forEach(value &#x3D;&gt; &#123;</span><br><span class=\"line\">\t\tconsole.log(value)</span><br><span class=\"line\">\t&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n","categories":[],"tags":[{"name":"ES6  this指向  箭头函数","slug":"ES6-this指向-箭头函数","count":1,"path":"api/tags/ES6-this指向-箭头函数.json"}]}